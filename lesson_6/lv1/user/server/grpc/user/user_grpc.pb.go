// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VerifyUserClient is the client API for VerifyUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifyUserClient interface {
	Register(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Rsp, error)
	Login(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Rsp, error)
	ChangePassword(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Rsp, error)
}

type verifyUserClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifyUserClient(cc grpc.ClientConnInterface) VerifyUserClient {
	return &verifyUserClient{cc}
}

func (c *verifyUserClient) Register(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/user.verifyUser/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifyUserClient) Login(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/user.verifyUser/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifyUserClient) ChangePassword(ctx context.Context, in *ReqUser, opts ...grpc.CallOption) (*Rsp, error) {
	out := new(Rsp)
	err := c.cc.Invoke(ctx, "/user.verifyUser/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifyUserServer is the server API for VerifyUser service.
// All implementations must embed UnimplementedVerifyUserServer
// for forward compatibility
type VerifyUserServer interface {
	Register(context.Context, *ReqUser) (*Rsp, error)
	Login(context.Context, *ReqUser) (*Rsp, error)
	ChangePassword(context.Context, *ReqUser) (*Rsp, error)
	mustEmbedUnimplementedVerifyUserServer()
}

// UnimplementedVerifyUserServer must be embedded to have forward compatible implementations.
type UnimplementedVerifyUserServer struct {
}

func (UnimplementedVerifyUserServer) Register(context.Context, *ReqUser) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedVerifyUserServer) Login(context.Context, *ReqUser) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedVerifyUserServer) ChangePassword(context.Context, *ReqUser) (*Rsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedVerifyUserServer) mustEmbedUnimplementedVerifyUserServer() {}

// UnsafeVerifyUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifyUserServer will
// result in compilation errors.
type UnsafeVerifyUserServer interface {
	mustEmbedUnimplementedVerifyUserServer()
}

func RegisterVerifyUserServer(s grpc.ServiceRegistrar, srv VerifyUserServer) {
	s.RegisterService(&VerifyUser_ServiceDesc, srv)
}

func _VerifyUser_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifyUserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.verifyUser/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifyUserServer).Register(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifyUser_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifyUserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.verifyUser/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifyUserServer).Login(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifyUser_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifyUserServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.verifyUser/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifyUserServer).ChangePassword(ctx, req.(*ReqUser))
	}
	return interceptor(ctx, in, info, handler)
}

// VerifyUser_ServiceDesc is the grpc.ServiceDesc for VerifyUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VerifyUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.verifyUser",
	HandlerType: (*VerifyUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _VerifyUser_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _VerifyUser_Login_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _VerifyUser_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
